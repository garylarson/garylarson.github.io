<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogging on Gary Larson</title>
    <link>/tags/blogging/</link>
    <description>Recent content in Blogging on Gary Larson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; Copyright 2018 Gary Larson</copyright>
    <lastBuildDate>Mon, 17 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/blogging/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How I got LaTeX working with Hugo and blogdown</title>
      <link>/post/how-i-got-latex-working-with-hugo-and-blogdown/</link>
      <pubDate>Mon, 17 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/how-i-got-latex-working-with-hugo-and-blogdown/</guid>
      <description>Solution 0 of 3 First of all, if you need LaTeX but don’t need any R code, just write the post in .md. Then you can use full-line equations like $$x=5$$ to get \[x=5\]
And the typical inline $x=5$ gives you \(x=5\).
 Solution 1 of 3 NOTE: This solution for getting LaTeX to work via MathJax requires the blog post to be in .Rmd format. It doesn’t work in .</description>
    </item>
    
    <item>
      <title>Produce a Python blog post with figures</title>
      <link>/post/produce-a-python-blog-post-with-figures/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/produce-a-python-blog-post-with-figures/</guid>
      <description>To create a Hugo blog post with Python code and figures, I export an ipython notebook as a .md file. The result is a .zip file containing the .md file and images for the figures. A little modification is needed to get these files just right so that when Hugo builds my website, the post is ready to go with no blank figures. After exporting the jupyter / ipython notebook as .</description>
    </item>
    
    <item>
      <title>Syntax highlighting for a Hugo data science blog</title>
      <link>/post/syntax-highlighting-for-a-hugo-data-science-blog/</link>
      <pubDate>Wed, 22 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/syntax-highlighting-for-a-hugo-data-science-blog/</guid>
      <description>NOTE: I believe this requires the post to be in .Rmarkdown format, and that an .Rmd post will not have the syntax highlighting.
This post explains how I set up my Hugo blog (with the Whiteplain theme) to get the type of syntax highlighting I want for data science / statistics purposes. I relied heavily on this post from Amber Thomas. Thanks a lot Amber! If I were you, I&amp;rsquo;d probably use Amber&amp;rsquo;s more thorough post as a guide.</description>
    </item>
    
    <item>
      <title>Blogging with runnable Python in Rmarkdown files</title>
      <link>/post/blogging-with-runnable-python-in-rmarkdown-files/</link>
      <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/blogging-with-runnable-python-in-rmarkdown-files/</guid>
      <description>I wondered if I could blog with runnable Python code chunks if I&amp;rsquo;m creating my Hugo content with .Rmarkdown files. It looks like I can with the reticulate package; see the vignette here.
install.packages(&#39;reticulate&#39;, repos=&amp;quot;https://cloud.r-project.org&amp;quot;) library(reticulate)  I believe this allows you to actually run Python. Alternatively, if you just want to display Python code, just use a code fence, i.e. the Github-style code block that&amp;rsquo;s 3 backticks, new line, code, then three closing backticks on a new line, like so:</description>
    </item>
    
  </channel>
</rss>