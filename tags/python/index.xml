<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Gary Larson</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on Gary Larson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy; Copyright 2018 Gary Larson</copyright>
    <lastBuildDate>Sat, 08 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Produce a Python blog post with figures</title>
      <link>/post/produce-a-python-blog-post-with-figures/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/produce-a-python-blog-post-with-figures/</guid>
      <description>To create a blog post with Python code and figures, I export an ipython notebook as a .md file. The result is a .zip file containing the .md file and images for the figures. A little modification is needed to get these files just right so that when Hugo builds my website, the post is ready to go with no blank figures. After exporting the jupyter / ipython notebook as .</description>
    </item>
    
    <item>
      <title>Notes on Python Data Science Handbook</title>
      <link>/post/notes-on-python-data-science-handbook/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/notes-on-python-data-science-handbook/</guid>
      <description>This notebook contains notes I made while studying topics from the Python Data Science Handbook by Jake Vanderplas. His Github repo of the book is here. I forked the repo, and that clone is located on my local filesystem at
~/github/jakevdp_PythonDataScienceHandbook  3.01 - Introducing Pandas objects The Pandas Index object (p. 105) Index objects are immutable. They can also be treated as ordered sets because
 (p106) The Index object follows many of the conventions used by Python&amp;rsquo;s built-in set data structure, so that unions, intersections, differences, and other combinations can be computed in a familiar way.</description>
    </item>
    
    <item>
      <title>Regression in Python</title>
      <link>/post/regression-in-python/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/regression-in-python/</guid>
      <description>Linear and Polynomial Regression Here&amp;rsquo;s some cool initial code from page 378 (under &amp;ldquo;Derived Features&amp;rdquo; in the section on Feature Engineering) in the Python Data Science Handbook (PDSH). This code will allow me to quickly fit a linear and polynomial regression to very simple data. My comments are marked something like ### GJL::
% matplotlib inline import numpy as np import matplotlib.pyplot as plt x = np.array([1,2,3,4,5]) y = np.</description>
    </item>
    
    <item>
      <title>Python: single underscores vs. double underscores</title>
      <link>/post/single-underscore-vs-double-underscore/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/single-underscore-vs-double-underscore/</guid>
      <description>This Youtube video is a really great 6 minute demonstration of the distinction between _ and __. I&amp;rsquo;ll embed the linked video at the end of this post. One of the top comments on that video says
 For C++ people, foo is public, _bar is protected, and __baz is private.
 Here&amp;rsquo;s a simple class, with an initializer implemented, including the three variables foo, _bar, and __baz.
class Test: def __init__(self): self.</description>
    </item>
    
    <item>
      <title>Blogging with runnable Python in Rmarkdown files</title>
      <link>/post/blogging-with-runnable-python-in-rmarkdown-files/</link>
      <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/blogging-with-runnable-python-in-rmarkdown-files/</guid>
      <description>I wondered if I could blog with runnable Python code chunks if I&amp;rsquo;m creating my Hugo content with .Rmarkdown files. It looks like I can with the reticulate package; see the vignette here.
install.packages(&#39;reticulate&#39;, repos=&amp;quot;https://cloud.r-project.org&amp;quot;) library(reticulate)  I believe this allows you to actually run Python. Alternatively, if you just want to display Python code, just use a code fence, i.e. the Github-style code block that&amp;rsquo;s 3 backticks, new line, code, then three closing backticks on a new line, like so:</description>
    </item>
    
  </channel>
</rss>